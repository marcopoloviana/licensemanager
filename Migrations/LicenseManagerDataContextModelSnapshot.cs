// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using licensemanager.DataContext;

namespace licensemanager.Migrations
{
    [DbContext(typeof(LicenseManagerDataContext))]
    partial class LicenseManagerDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("LicenceManager.Models.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("CustomerStatus")
                        .IsRequired();

                    b.Property<DateTime>("EndDate")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Ie")
                        .HasMaxLength(20);

                    b.Property<string>("Message");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<int>("PaidAnnuity");

                    b.Property<int>("ProducID");

                    b.Property<int?>("ProductID");

                    b.Property<string>("ProductSerial")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("ResaleID");

                    b.Property<string>("SocialName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("StartDate")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Status")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ResaleID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("LicenceManager.Models.CustomerModule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerID");

                    b.Property<int>("ModuleID");

                    b.Property<int>("ProductID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ModuleID");

                    b.HasIndex("ProductID");

                    b.ToTable("CustomerModule");
                });

            modelBuilder.Entity("LicenceManager.Models.CustomerStation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerID");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("StationSerial")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerStation");
                });

            modelBuilder.Entity("LicenceManager.Models.Module", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CryptDescription")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("CustomerID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ProductID");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ProductID");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("LicenceManager.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("IdApplication");

                    b.Property<bool>("Status");

                    b.HasKey("ID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("LicenceManager.Models.Resale", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CelPhone")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("CpfCnpj")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Manager")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<string>("SocialName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Status");

                    b.HasKey("ID");

                    b.ToTable("Resale");
                });

            modelBuilder.Entity("LicenceManager.Models.Version", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProductID");

                    b.Property<string>("Script");

                    b.Property<DateTime>("VersionDate")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("VersionScript")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("VersionValue")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("Version");
                });

            modelBuilder.Entity("LicenceManager.Models.Customer", b =>
                {
                    b.HasOne("LicenceManager.Models.Product", "Product")
                        .WithMany("Customers")
                        .HasForeignKey("ProductID");

                    b.HasOne("LicenceManager.Models.Resale", "Resale")
                        .WithMany("Customers")
                        .HasForeignKey("ResaleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LicenceManager.Models.CustomerModule", b =>
                {
                    b.HasOne("LicenceManager.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LicenceManager.Models.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LicenceManager.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LicenceManager.Models.CustomerStation", b =>
                {
                    b.HasOne("LicenceManager.Models.Customer", "Customer")
                        .WithMany("Stations")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LicenceManager.Models.Module", b =>
                {
                    b.HasOne("LicenceManager.Models.Customer")
                        .WithMany("Modules")
                        .HasForeignKey("CustomerID");

                    b.HasOne("LicenceManager.Models.Product", "Product")
                        .WithMany("Modules")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LicenceManager.Models.Version", b =>
                {
                    b.HasOne("LicenceManager.Models.Product", "Product")
                        .WithMany("Versions")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
